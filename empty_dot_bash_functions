recon() { echo "[*] Running Recon..."; uname -a; whoami; id; ifconfig; }

# useful for long-running processes
# example: `notify nmap -sS -p- 10.10.10.10`
notify() { "$@"; notify-send "Command '$*' finished." & }

# auto-extract archives
extract () {
  if [ -f "$1" ]; then
    case "$1" in
      *.tar.bz2) tar xjf "$1" ;;
      *.tar.gz)  tar xzf "$1" ;;
      *.tar.zst) tar --zstd -xf "$1" ;;
      *.bz2)     bunzip2 "$1" ;;
      *.rar)     unrar x "$1" ;;
      *.gz)      gunzip "$1" ;;
      *.tar)     tar xf "$1" ;;
      *.tbz2)    tar xjf "$1" ;;
      *.tgz)     tar xzf "$1" ;;
      *.zip)     unzip "$1" ;;
      *.Z)       uncompress "$1" ;;
      *.7z)      7z x "$1" ;;
      *.zst)     zstd -d "$1" ;;
      *)         echo "Unknown format: $1" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

function login_registry() {
  # fail if not enough arguments
  if [[ $# -ne 3 ]]; then
    echo "Usage: login_registry <registry> <username> <password>"
    return 1
  fi
  local registry=$1
  local username=$2
  local password=$3
  echo "Logging in to $registry with:"
  echo "  Username: $username"
  echo "  Password: [hidden]"
  echo $password | zarf tools registry login $registry -u $username --password-stdin 2>&1 > /dev/null
  if [[ $? -ne 0 ]]; then
    echo "Login to $registry failed. Please check your credentials."
    return 1
  fi
  echo "Login to $registry successful!"
  return 0
}
